---
import ContentLayout from '../../../layouts/ContentPageLayout.astro';

const section = 'basic';
const currentPage = 'basic';
const title = 'fabric - 模块化AI工具框架';
const sidebarContent = `
  <a href="/basic/cli-tools">CLI工具概述</a>
  <a href="/basic/cli-tools/aichat">aichat</a>
  <a href="/basic/cli-tools/codex-cli">OpenAI Codex CLI</a>
  <a href="/basic/cli-tools/fabric" class="active">fabric</a>
  <a href="/basic/cli-tools/trends">趋势与启示</a>
`;
const headings = [
  { id: 'introduction', text: '介绍', depth: 1 },
  { id: 'philosophy', text: '设计哲学', depth: 1 },
  { id: 'installation', text: '安装与配置', depth: 1 },
  { id: 'basic-usage', text: '基础使用', depth: 1 },
  { id: 'patterns', text: '核心模式库', depth: 1 },
  { id: 'custom-patterns', text: '自定义模式', depth: 1 },
  { id: 'advanced', text: '高级特性', depth: 1 },
  { id: 'ecosystem', text: '生态系统', depth: 1 }
];
---

<ContentLayout 
  {title}
  {section}
  {currentPage}
  {sidebarContent}
  {headings}
>

## 介绍

fabric是一个开创性的模块化AI工具框架，它将复杂的AI能力分解为可重用的"模式(Patterns)"，每个模式都是一个独立的文本处理管道。fabric的核心思想是"AI能力的模块化封装"，让用户能够像搭积木一样组合不同的AI功能。

**核心特点**:
- 🧩 **模块化设计**: 每个功能都是独立的模式
- 🔧 **可组合性**: 模式之间可以灵活组合
- 📦 **开箱即用**: 提供丰富的预置模式库
- 🚀 **高效工作流**: 优化终端AI交互体验

## 设计哲学

fabric的设计基于以下几个核心原则：

### 1. 模式化思维
将复杂的AI任务分解为可重用的模式，每个模式解决一个特定的问题。

### 2.  Unix哲学
遵循"做好一件事"的原则，每个模式都是一个小而专的工具。

### 3. 可组合性
模式之间可以通过管道(|)组合，创建复杂的工作流。

### 4. 开发者友好
提供清晰的API和文档，方便开发者扩展和自定义。

## 安装与配置

### 安装方法
```bash
# 使用pip安装
pip install fabric-api

# 或者从源码安装
git clone https://github.com/danielmiessler/fabric.git
cd fabric
pip install -e .
```

### 快速配置
```bash
# 设置API密钥
export OPENAI_API_KEY="your-api-key"

# 验证安装
fabric --version
```

### 配置文件
创建 `~/.fabric/config.yaml`:
```yaml
api:
  openai:
    api_key: "your-openai-api-key"
    model: "gpt-4"
  
patterns:
  directory: "~/.fabric/patterns"
  
logging:
  level: "INFO"
```

## 基础使用

### 使用预置模式
```bash
# 总结网页内容
fabric summarize https://example.com

# 提取关键信息
fabric extract "会议记录.txt"

# 翻译文本
fabric translate "Hello world" --to chinese
```

### 管道组合
```bash
# 组合多个模式
cat document.txt | fabric summarize | fabric translate --to spanish
```

### 批量处理
```bash
# 处理多个文件
for file in *.md; do
  fabric summarize "$file" > "summary_$file"
done
```

## 核心模式库

fabric提供了丰富的预置模式库，涵盖各种常见任务：

### 文本处理模式
- `summarize`: 文本摘要
- `extract`: 关键信息提取
- `rewrite`: 文本重写
- `expand`: 内容扩展
- `simplify`: 简化复杂文本

### 代码相关模式
- `explain_code`: 代码解释
- `refactor`: 代码重构
- `generate_code`: 代码生成
- `debug`: 调试辅助

### 创作模式
- `brainstorm`: 头脑风暴
- `outline`: 生成大纲
- `draft`: 起草文档
- `edit`: 文本编辑

### 分析模式
- `analyze`: 文本分析
- `compare`: 比较分析
- `categorize`: 分类整理
- `sentiment`: 情感分析

## 自定义模式

### 创建自定义模式
```bash
# 创建模式目录
mkdir -p ~/.fabric/patterns
```

### 模式文件结构
创建 `~/.fabric/patterns/my-summarizer.yaml`:
```yaml
name: "my-summarizer"
version: "1.0.0"
description: "自定义文本摘要器"

prompt: |
  你是一个专业的技术文档摘要专家。请将以下文本内容
  总结为3-5个关键要点，使用中文输出。

  要求：
  1. 保持技术准确性
  2. 突出核心概念
  3. 避免过度简化

input: ${input}

parameters:
  max_length: 500
  temperature: 0.3
```

### 使用自定义模式
```bash
# 使用自定义模式
fabric my-summarizer "长文本内容"

# 注册模式
fabric pattern register ~/.fabric/patterns/my-summarizer.yaml
```

## 高级特性

### 模式版本管理
```bash
# 列出所有模式
fabric pattern list

# 更新模式
fabric pattern update my-summarizer

# 删除模式
fabric pattern remove my-summarizer
```

### 工作流自动化
```bash
# 创建自动化脚本
#!/bin/bash
# 自动处理日报
cat daily_report.txt | \
  fabric extract --key-points | \
  fabric summarize --bullet-points | \
  fabric translate --to english > daily_summary_en.txt
```

### API集成
```python
# Python中使用fabric
from fabric import Fabric

fabric = Fabric()
result = fabric.execute("summarize", "长文本内容")
print(result)
```

## 生态系统

### 社区模式库
```bash
# 安装社区模式
fabric pattern install community/awesome-summarizer

# 浏览模式市场
fabric pattern search "code review"
```

### 开发扩展
```bash
# 创建模式模板
fabric pattern create my-pattern --template typescript

# 测试模式
fabric pattern test my-pattern --input "测试文本"
```

### 集成工具
- **编辑器插件**: VS Code, NeoVim等编辑器集成
- **CI/CD管道**: 自动化代码审查和文档生成
- **监控系统**: 日志分析和异常检测

fabric通过模块化的方式重新定义了AI工具的使用体验，让开发者能够更加灵活和高效地利用AI能力，是终端AI工具发展的重要里程碑。

</ContentLayout>
