---
import ContentLayout from '../../../layouts/ContentPageLayout.astro';

const section = 'basic';
const currentPage = 'agent-frameworks/crewai';
const title = 'CrewAI - 多智能体协作框架';
const sidebarContent = `
  <a href="/basic/agent-frameworks">Agent框架概述</a>
  <a href="/basic/agent-frameworks/langchain">LangChain框架</a>
  <a href="/basic/agent-frameworks/crewai" class="active">CrewAI多智能体</a>
`;
const headings = [
  { id: 'introduction', text: '介绍', depth: 1 },
  { id: 'core-concepts', text: '核心概念', depth: 1 },
  { id: 'quick-start', text: '快速开始', depth: 1 },
  { id: 'crew-configuration', text: 'Crew配置', depth: 1 },
  { id: 'agent-roles', text: 'Agent角色定义', depth: 1 },
  { id: 'task-management', text: '任务管理', depth: 1 },
  { id: 'real-examples', text: '实战案例', depth: 1 }
];
---

<ContentLayout 
  {title}
  {section}
  {currentPage}
  {sidebarContent}
  {headings}
>

## 介绍

CrewAI是专为构建多智能体协作系统而设计的框架，它模拟真实团队的工作模式，让多个AI代理像人类团队一样协作完成复杂任务。

**核心特点**:
- 👥 **团队协作**: 模拟真实的团队协作模式
- 🎭 **角色专业化**: 每个Agent有明确的职责分工
- 📋 **任务驱动**: 通过任务分配驱动协作流程
- 🔄 **工作流管理**: 灵活的任务执行和依赖管理
- 🎯 **目标导向**: 围绕最终目标优化团队协作

## 核心概念

### Agent - 智能代理
```python
from crewai import Agent

# 定义专业化的Agent
researcher = Agent(
    role='研究员',
    goal='收集和分析相关信息',
    backstory="""你是一位经验丰富的研究员，擅长从多个渠道
    收集准确、最新的信息，并进行深入分析。""",
    verbose=True,
    allow_delegation=False
)
```

### Task - 任务
```python
from crewai import Task

# 定义具体任务
research_task = Task(
    description="""研究人工智能在医疗健康领域的最新应用，
    重点关注诊断辅助和药物发现方面的进展""",
    agent=researcher,
    expected_output="详细的研究报告，包含最新趋势和具体案例"
)
```

### Crew - 团队
```python
from crewai import Crew

# 组建团队
crew = Crew(
    agents=[researcher, writer, editor],
    tasks=[research_task, writing_task, editing_task],
    verbose=2
)
```

## 快速开始

### 安装
```bash
pip install crewai
pip install crewai[tools]  # 包含额外工具
```

### 第一个Crew示例
```python
from crewai import Agent, Task, Crew
from crewai_tools import SerperDevTool

# 1. 定义工具
search_tool = SerperDevTool()

# 2. 创建Agent
researcher = Agent(
    role='市场研究员',
    goal='分析市场趋势和竞争态势',
    backstory="""你是一位专业的市场研究分析师，
    具有10年的行业经验，擅长识别市场机会和威胁。""",
    tools=[search_tool],
    verbose=True
)

analyst = Agent(
    role='数据分析师',
    goal='从研究数据中提取关键洞察',
    backstory="""你是一位经验丰富的数据分析师，
    精通统计分析和数据可视化。""",
    verbose=True
)

# 3. 定义任务
research_task = Task(
    description="""研究2024年人工智能市场的发展趋势，
    包括主要厂商、技术发展方向和市场规模预测""",
    agent=researcher
)

analysis_task = Task(
    description="""分析研究结果，提供投资建议和风险评估""",
    agent=analyst,
    context=[research_task]  # 依赖于研究任务的结果
)

# 4. 组建团队
crew = Crew(
    agents=[researcher, analyst],
    tasks=[research_task, analysis_task],
    verbose=2
)

# 5. 执行任务
result = crew.kickoff()
print(result)
```

## Crew配置

### 高级Crew配置
```python
from crewai import Crew, Process

crew = Crew(
    agents=[agent1, agent2, agent3],
    tasks=[task1, task2, task3],
    process=Process.hierarchical,  # 层次化流程
    verbose=2,
    memory=True,                   # 启用记忆功能
    max_rpm=10,                   # 限制请求频率
    share_crew=False              # 不与CrewAI分享数据
)
```

### 不同的执行流程
```python
# 顺序执行 (默认)
crew_sequential = Crew(
    agents=agents,
    tasks=tasks,
    process=Process.sequential
)

# 层次化执行
crew_hierarchical = Crew(
    agents=agents,
    tasks=tasks,
    process=Process.hierarchical,
    manager_llm=manager_llm  # 指定管理者LLM
)
```

## Agent角色定义

### 专业化Agent配置
```python
# 研究专家
research_expert = Agent(
    role='高级研究专家',
    goal='进行深度研究并提供专业见解',
    backstory="""你拥有博士学位和15年研究经验，
    发表过多篇高质量学术论文，在业界享有很高声誉。""",
    tools=[search_tool, academic_tool],
    llm=ChatOpenAI(model="gpt-4", temperature=0.1),
    max_iter=5,
    memory=True,
    verbose=True,
    allow_delegation=True  # 允许委托任务给其他Agent
)

# 创意设计师
creative_designer = Agent(
    role='创意总监',
    goal='设计创新的视觉内容和营销材料',
    backstory="""你是一位获奖的创意总监，
    在广告和品牌设计领域有20年经验。""",
    tools=[design_tool, image_tool],
    llm=ChatOpenAI(model="gpt-4", temperature=0.8),  # 更高的创造性
    verbose=True
)

# 技术专家
tech_specialist = Agent(
    role='技术架构师',
    goal='设计和评估技术解决方案',
    backstory="""你是一位资深的技术架构师，
    精通多种编程语言和系统架构设计。""",
    tools=[code_tool, architecture_tool],
    llm=ChatOpenAI(model="gpt-4", temperature=0.2),
    verbose=True
)
```

### Agent能力增强
```python
from crewai_tools import (
    CodeDocsSearchTool,
    CSVSearchTool,
    DirectorySearchTool,
    FileReadTool
)

# 为Agent配备专业工具
senior_developer = Agent(
    role='高级开发工程师',
    goal='编写高质量的代码并进行技术决策',
    backstory="""你是一位有10年经验的全栈开发工程师，
    精通现代开发实践和架构模式。""",
    tools=[
        CodeDocsSearchTool(),
        FileReadTool(),
        DirectorySearchTool()
    ],
    llm=ChatOpenAI(model="gpt-4"),
    verbose=True
)
```

## 任务管理

### 复杂任务定义
```python
# 多阶段任务
complex_task = Task(
    description="""
    开发一个完整的Web应用项目：
    1. 需求分析和技术选型
    2. 系统架构设计
    3. 前端界面设计
    4. 后端API开发
    5. 数据库设计
    6. 测试和部署
    """,
    agent=tech_lead,
    expected_output="""完整的项目文档，包括：
    - 需求规格说明书
    - 技术架构图
    - UI设计稿
    - 完整的代码实现
    - 测试报告
    - 部署指南""",
    tools=[development_tools],
    async_execution=False
)

# 依赖关系管理
design_task = Task(
    description="设计用户界面和用户体验",
    agent=designer,
    expected_output="UI/UX设计文档和原型"
)

development_task = Task(
    description="基于设计实现前端界面",
    agent=developer,
    expected_output="完整的前端代码",
    context=[design_task]  # 依赖于设计任务
)

testing_task = Task(
    description="对开发的功能进行全面测试",
    agent=tester,
    expected_output="测试报告和bug列表",
    context=[development_task]  # 依赖于开发任务
)
```

### 任务监控和回调
```python
def task_callback(task_output):
    print(f"任务完成: {task_output.description}")
    print(f"输出: {task_output.result}")

monitored_task = Task(
    description="监控的任务示例",
    agent=worker_agent,
    callback=task_callback
)
```

## 实战案例

### 案例1：内容营销团队
```python
from crewai import Agent, Task, Crew
from crewai_tools import SerperDevTool, WebsiteSearchTool

# 搜索工具
search_tool = SerperDevTool()
web_tool = WebsiteSearchTool()

# 市场研究员
market_researcher = Agent(
    role='市场研究员',
    goal='分析市场趋势和受众需求',
    backstory="""你是一位经验丰富的数字营销研究专家，
    擅长分析市场趋势、竞争对手策略和目标受众行为。""",
    tools=[search_tool, web_tool],
    verbose=True
)

# 内容策划师
content_strategist = Agent(
    role='内容策略师',
    goal='制定内容策略和编辑计划',
    backstory="""你是一位创意内容策略专家，
    精通内容营销策略和品牌传播。""",
    verbose=True
)

# 文案撰写师
copywriter = Agent(
    role='高级文案',
    goal='创作引人入胜的营销内容',
    backstory="""你是一位获奖的创意文案，
    擅长创作各种类型的营销内容。""",
    verbose=True
)

# 任务定义
research_task = Task(
    description="""
    研究AI写作工具市场：
    1. 分析主要竞争对手
    2. 识别目标用户群体
    3. 了解用户痛点和需求
    4. 分析市场趋势和机会
    """,
    agent=market_researcher,
    expected_output="详细的市场研究报告"
)

strategy_task = Task(
    description="""
    基于市场研究结果，制定内容营销策略：
    1. 定义品牌定位
    2. 确定内容主题方向
    3. 制定发布时间表
    4. 设计用户参与策略
    """,
    agent=content_strategist,
    expected_output="完整的内容营销策略文档",
    context=[research_task]
)

content_creation_task = Task(
    description="""
    创作营销内容：
    1. 撰写博客文章 (3篇)
    2. 创作社交媒体文案 (10条)
    3. 设计邮件营销内容 (5封)
    4. 编写产品说明文案
    """,
    agent=copywriter,
    expected_output="完整的营销内容包",
    context=[strategy_task]
)

# 组建营销团队
marketing_crew = Crew(
    agents=[market_researcher, content_strategist, copywriter],
    tasks=[research_task, strategy_task, content_creation_task],
    verbose=2,
    process=Process.sequential
)

# 执行营销项目
marketing_result = marketing_crew.kickoff()
```

### 案例2：软件开发团队
```python
# 产品经理
product_manager = Agent(
    role='产品经理',
    goal='定义产品需求和功能规格',
    backstory="""你是一位经验丰富的产品经理，
    擅长用户需求分析和产品规划。""",
    tools=[market_research_tool],
    verbose=True
)

# 系统架构师
system_architect = Agent(
    role='系统架构师',
    goal='设计可扩展的系统架构',
    backstory="""你是一位资深的系统架构师，
    有15年的大型系统设计经验。""",
    tools=[architecture_tool],
    verbose=True
)

# 前端开发者
frontend_developer = Agent(
    role='前端开发工程师',
    goal='实现用户界面和交互功能',
    backstory="""你是一位专业的前端开发工程师，
    精通React、Vue等现代前端框架。""",
    tools=[frontend_tools],
    verbose=True
)

# 后端开发者
backend_developer = Agent(
    role='后端开发工程师',
    goal='实现服务器端逻辑和API',
    backstory="""你是一位高级后端开发工程师，
    精通Python、Node.js等后端技术。""",
    tools=[backend_tools],
    verbose=True
)

# 测试工程师
qa_engineer = Agent(
    role='测试工程师',
    goal='确保产品质量和用户体验',
    backstory="""你是一位专业的软件测试工程师，
    擅长自动化测试和质量保证。""",
    tools=[testing_tools],
    verbose=True
)

# 开发任务流程
requirement_task = Task(
    description="分析用户需求，编写产品规格文档",
    agent=product_manager,
    expected_output="详细的产品需求文档(PRD)"
)

architecture_task = Task(
    description="基于需求设计系统架构",
    agent=system_architect,
    expected_output="系统架构设计文档",
    context=[requirement_task]
)

frontend_task = Task(
    description="开发用户界面和前端功能",
    agent=frontend_developer,
    expected_output="完整的前端应用代码",
    context=[architecture_task]
)

backend_task = Task(
    description="开发后端API和业务逻辑",
    agent=backend_developer,
    expected_output="后端服务代码和API文档",
    context=[architecture_task]
)

testing_task = Task(
    description="对前后端功能进行全面测试",
    agent=qa_engineer,
    expected_output="测试报告和质量评估",
    context=[frontend_task, backend_task]
)

# 组建开发团队
dev_crew = Crew(
    agents=[
        product_manager, 
        system_architect, 
        frontend_developer, 
        backend_developer, 
        qa_engineer
    ],
    tasks=[
        requirement_task,
        architecture_task,
        frontend_task,
        backend_task,
        testing_task
    ],
    process=Process.hierarchical,  # 使用层次化管理
    manager_llm=ChatOpenAI(model="gpt-4", temperature=0.3),
    verbose=2
)

# 启动开发项目
development_result = dev_crew.kickoff()
```

### 案例3：创业公司顾问团队
```python
# 商业顾问
business_consultant = Agent(
    role='商业战略顾问',
    goal='提供商业战略和市场定位建议',
    backstory="""你是一位麦肯锡出身的战略顾问，
    帮助过数百家初创公司制定商业策略。""",
    tools=[market_analysis_tool],
    verbose=True
)

# 财务顾问
financial_advisor = Agent(
    role='财务顾问',
    goal='分析财务状况并提供融资建议',
    backstory="""你是一位注册会计师和投资顾问，
    在创业公司财务规划方面有丰富经验。""",
    tools=[financial_tool],
    verbose=True
)

# 技术顾问
tech_consultant = Agent(
    role='技术顾问',
    goal='评估技术方案并提供建议',
    backstory="""你是一位资深的技术专家和CTO，
    在技术选型和团队建设方面经验丰富。""",
    tools=[tech_analysis_tool],
    verbose=True
)

# 营销顾问
marketing_consultant = Agent(
    role='营销顾问',
    goal='制定品牌策略和增长计划',
    backstory="""你是一位增长黑客专家，
    帮助多家初创公司实现快速增长。""",
    tools=[marketing_tool],
    verbose=True
)

# 咨询项目任务
business_analysis = Task(
    description="""
    为一家AI教育初创公司提供商业分析：
    1. 市场机会评估
    2. 竞争对手分析
    3. 商业模式建议
    4. 发展路线图
    """,
    agent=business_consultant,
    expected_output="商业战略分析报告"
)

financial_planning = Task(
    description="""
    制定财务规划：
    1. 成本结构分析
    2. 收入预测模型
    3. 融资需求计算
    4. 投资回报分析
    """,
    agent=financial_advisor,
    expected_output="财务规划报告",
    context=[business_analysis]
)

tech_roadmap = Task(
    description="""
    技术发展规划：
    1. 技术架构建议
    2. 开发团队规划
    3. 技术风险评估
    4. 产品迭代计划
    """,
    agent=tech_consultant,
    expected_output="技术发展路线图",
    context=[business_analysis]
)

marketing_strategy = Task(
    description="""
    营销策略制定：
    1. 品牌定位策略
    2. 用户获取渠道
    3. 增长策略设计
    4. KPI指标体系
    """,
    agent=marketing_consultant,
    expected_output="营销增长策略",
    context=[business_analysis]
)

# 顾问团队
advisory_crew = Crew(
    agents=[
        business_consultant,
        financial_advisor,
        tech_consultant,
        marketing_consultant
    ],
    tasks=[
        business_analysis,
        financial_planning,
        tech_roadmap,
        marketing_strategy
    ],
    process=Process.sequential,
    verbose=2
)

# 执行咨询项目
advisory_result = advisory_crew.kickoff()
```

CrewAI通过模拟真实团队的协作模式，让AI代理能够像人类专家团队一样高效协作。它特别适合需要多领域专业知识协同工作的复杂项目，是构建多智能体应用的优秀选择。

</ContentLayout>
