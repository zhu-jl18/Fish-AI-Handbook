---
interface Props {
  title: string;
  section: string;
  currentPage: string;
  sidebarContent?: string;
  headings?: Array<{ id: string; text: string; depth: number }>;
}

const { 
  title, 
  section, 
  currentPage, 
  sidebarContent = '',
  headings = []
} = Astro.props;

// 生成目录导航
const generateToc = (headings: Array<{ id: string; text: string; depth: number }>) => {
  if (headings.length === 0) return '';
  
  return `
    <div class="toc-container">
      <h3>目录</h3>
      <ul class="toc-list">
        ${headings.map(heading => 
          `<li class="toc-item toc-depth-${heading.depth}">
            <a href="#${heading.id}">${heading.text}</a>
          </li>`
        ).join('')}
      </ul>
    </div>
  `;
};
---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title} - AI应用指南</title>
  <style>
    :root {
      --primary-color: #2563eb;
      --secondary-color: #64748b;
      --background-color: #f8fafc;
      --sidebar-width: 250px;
      --content-width: 800px;
      --border-color: #e2e8f0;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.6;
      color: #334155;
      background-color: var(--background-color);
    }
    
    .layout-container {
      display: flex;
      min-height: 100vh;
    }
    
    .sidebar {
      width: var(--sidebar-width);
      background: white;
      border-right: 1px solid var(--border-color);
      padding: 2rem 1rem;
      position: fixed;
      height: 100vh;
      overflow-y: auto;
    }
    
    .sidebar h2 {
      font-size: 1.2rem;
      margin-bottom: 1.5rem;
      color: var(--primary-color);
    }
    
    .sidebar a {
      display: block;
      padding: 0.5rem 1rem;
      color: var(--secondary-color);
      text-decoration: none;
      border-radius: 6px;
      margin-bottom: 0.25rem;
      transition: all 0.2s;
    }
    
    .sidebar a:hover {
      background-color: #f1f5f9;
      color: var(--primary-color);
    }
    
    .sidebar a.active {
      background-color: var(--primary-color);
      color: white;
      font-weight: 500;
    }
    
    .main-content {
      flex: 1;
      margin-left: var(--sidebar-width);
      padding: 2rem;
      max-width: var(--content-width);
    }
    
    .content-header {
      margin-bottom: 2rem;
    }
    
    .content-header h1 {
      font-size: 2.5rem;
      color: #1e293b;
      margin-bottom: 1rem;
    }
    
    .content-body {
      background: white;
      padding: 2rem;
      border-radius: 12px;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .content-body h2 {
      font-size: 1.8rem;
      color: #1e293b;
      margin: 2rem 0 1rem 0;
      padding-bottom: 0.5rem;
      border-bottom: 2px solid var(--primary-color);
    }
    
    .content-body h3 {
      font-size: 1.4rem;
      color: #374151;
      margin: 1.5rem 0 0.75rem 0;
    }
    
    .content-body p {
      margin-bottom: 1rem;
      color: #4b5563;
    }
    
    .content-body pre {
      background: #1f2937;
      color: #f9fafb;
      padding: 1rem;
      border-radius: 6px;
      overflow-x: auto;
      margin: 1rem 0;
    }
    
    .content-body code {
      background: #f1f5f9;
      padding: 0.2rem 0.4rem;
      border-radius: 4px;
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 0.9em;
    }
    
    .content-body pre code {
      background: none;
      padding: 0;
    }
    
    .toc-container {
      background: #f8fafc;
      padding: 1.5rem;
      border-radius: 8px;
      margin: 2rem 0;
      border-left: 4px solid var(--primary-color);
    }
    
    .toc-container h3 {
      font-size: 1.2rem;
      margin-bottom: 1rem;
      color: var(--primary-color);
    }
    
    .toc-list {
      list-style: none;
    }
    
    .toc-item {
      margin-bottom: 0.5rem;
    }
    
    .toc-depth-1 {
      font-weight: 600;
      margin-left: 0;
    }
    
    .toc-depth-2 {
      margin-left: 1rem;
      font-weight: 500;
    }
    
    .toc-depth-3 {
      margin-left: 2rem;
      font-size: 0.9em;
    }
    
    .toc-item a {
      color: var(--secondary-color);
      text-decoration: none;
      transition: color 0.2s;
    }
    
    .toc-item a:hover {
      color: var(--primary-color);
    }
    
    @media (max-width: 768px) {
      .layout-container {
        flex-direction: column;
      }
      
      .sidebar {
        position: relative;
        width: 100%;
        height: auto;
        border-right: none;
        border-bottom: 1px solid var(--border-color);
      }
      
      .main-content {
        margin-left: 0;
      }
    }
  </style>
</head>
<body>
  <div class="layout-container">
    <aside class="sidebar">
      <h2>导航菜单</h2>
      {@html sidebarContent}
    </aside>
    
    <main class="main-content">
      <header class="content-header">
        <h1>{title}</h1>
      </header>
      
      <article class="content-body">
        {@html generateToc(headings)}
        <slot />
      </article>
    </main>
  </div>
  
  <script>
    // 平滑滚动到锚点
    document.addEventListener('DOMContentLoaded', function() {
      const links = document.querySelectorAll('a[href^="#"]');
      
      links.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          
          const targetId = this.getAttribute('href').substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
      
      // 高亮当前章节
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const id = entry.target.id;
              const link = document.querySelector(`a[href="#${id}"]`);
              if (link) {
                document.querySelectorAll('.toc-item a').forEach(a => {
                  a.classList.remove('active');
                });
                link.classList.add('active');
              }
            }
          });
        },
        { rootMargin: '-20% 0px -60% 0px' }
      );
      
      headings.forEach(heading => {
        const element = document.getElementById(heading.id);
        if (element) {
          observer.observe(element);
        }
      });
    });
  </script>
</body>
</html>