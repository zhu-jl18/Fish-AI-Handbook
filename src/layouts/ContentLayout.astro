---
import BaseLayout from './BaseLayout.astro'
import Header from '../components/Header.astro'
import RightSidebar from '../components/RightSidebar.astro'
import { getSidebarForPath } from '../scripts/sidebars'
import { theme, getCurrentNavKey } from '../config/index'

/**
 * 正文字体等排版尺寸由 src/config/theme.ts 控制
 * 通过内联样式将 theme 配置注入到 .content-inner，确保仅影响正文区域
 */

const currentPath = Astro.url.pathname
const sidebarItems = getSidebarForPath(currentPath)

const {
  title,
  section,
  headings = [],
  contributors,
}: {
  title: string
  section: string
  headings?: any[]
  contributors?: any
} = Astro.props

// 基于 URL 别名推导导航高亮键（不依赖中文文案）
const currentKey = getCurrentNavKey(currentPath)
---

<BaseLayout title={title}>
  <Header currentPage={currentKey} />

  <div class="content-wrapper">
    <div class="layout-container">
      <main id="main-content" class="content">
        <div 
          class="content-inner" 
          data-pagefind-body
          style={`--font-size-base: ${theme.fontSizeBase}; --font-size-lg: ${theme.fontSizeLg}; --line-height-base: ${theme.lineHeightBase};`}
        >
          <slot />
        </div>
      </main>

      <RightSidebar
        headings={headings}
        structure={sidebarItems}
        currentPath={currentPath}
        contributors={contributors}
      />
    </div>
  </div>
</BaseLayout>

<style>
  .content-wrapper {
    display: flex;
    justify-content: center;
    margin-top: 60px;
    min-height: calc(100vh - 60px);
    width: 100%;
    background-color: var(--bg-color);
  }

  .layout-container {
    display: flex;
    gap: var(--layout-gap);
    max-width: var(--layout-max-width);
    width: 100%;
    padding: 0 calc(var(--layout-gap) + 1rem);
    position: relative;
    justify-content: center;
    align-items: flex-start;
    margin: 0 auto;
  }

  .content {
    flex: 0 1 var(--content-max-width);
    width: min(100%, var(--content-max-width));
    padding: 1.5rem 2rem 2.5rem 2rem;
    background-color: transparent;
    border-radius: 0;
    max-width: var(--content-max-width);
  }

  .content-inner {
    width: 100%;
    font-size: var(--font-size-base);
    line-height: var(--line-height-base);
  }

  /* 移除第一个标题的顶部外边距，确保与侧边栏对齐 */
  .content-inner > :global(:is(h1, h2, h3, h4, h5, h6):first-child) {
    margin-top: 0;
  }

  /* 内容区域标题更紧凑（仅作用于正文，不影响侧边栏） */
  .content-inner :global(h1) {
    font-size: clamp(1.6rem, 1.6vw + 0.5rem, 1.9rem);
    margin-top: calc(var(--section-spacing) * 0.75);
    margin-bottom: 1rem;
  }

  .content-inner :global(h2) {
    font-size: clamp(1.3rem, 1.1vw + 0.8rem, 1.6rem);
    margin-top: calc(var(--section-spacing) * 0.75);
    margin-bottom: 0.75rem;
    border-bottom: 1px solid var(--heading-divider-color);
    padding-bottom: 0.45rem;
  }

  .content-inner :global(h3) {
    font-size: clamp(1.1rem, 0.8vw + 0.75rem, 1.3rem);
    margin-top: 1.4rem;
    margin-bottom: 0.5rem;
    color: rgba(255, 255, 255, 0.9);
  }

  .content-inner :global(h4) {
    font-size: 1rem;
    margin-top: 1.3rem;
    margin-bottom: 0.45rem;
    color: rgba(255, 255, 255, 0.85);
  }

  .content-inner :global(h5) {
    font-size: 0.95rem;
    margin-top: 1.15rem;
    margin-bottom: 0.4rem;
    color: rgba(255, 255, 255, 0.8);
  }

  .content-inner :global(h6) {
    font-size: 0.9rem;
    margin-top: 1rem;
    margin-bottom: 0.35rem;
    color: rgba(255, 255, 255, 0.75);
    letter-spacing: -0.005em;
  }

  @media (max-width: 1440px) {
    .layout-container {
      padding: 0 calc(var(--layout-gap) * 0.75);
    }

    .content {
      padding: 1.5rem 1.85rem 2.25rem 1.85rem;
    }
  }

  @media (max-width: 1200px) {
    .content {
      padding: 1.5rem 1.75rem 2rem 1.75rem;
    }
  }

  @media (max-width: 1024px) {
    .layout-container {
      gap: 0;
      padding: 0;
    }

    .content {
      flex: 1;
      width: 100%;
      border-radius: 0;
      max-width: 100%;
      padding: 1.5rem 1.5rem 2rem 1.5rem;
    }
  }

  @media (max-width: 768px) {
    .content {
      padding: 1.5rem 1rem 1.5rem 1rem;
    }
  }
</style>
