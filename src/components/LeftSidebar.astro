---
import type {
  SidebarSection,
  SidebarGroup,
  SidebarLink,
} from '../scripts/sidebars'

const { items }: { items?: SidebarSection } = Astro.props
const currentPath = Astro.url.pathname

// 规范化路径：移除尾部斜杠（根路径除外）
const normalizePath = (path: string) => {
  if (!path || path === '/') return '/'
  return path.endsWith('/') ? path.slice(0, -1) : path
}

const normalizedCurrentPath = normalizePath(currentPath)

// 仅在路径完全相等时高亮（普通链接）
const isExactActive = (href?: string) =>
  !!href && normalizedCurrentPath === normalizePath(href)

// 对于包含子项的分组，允许前缀匹配
const isGroupActive = (href?: string) => {
  if (!href) return false
  const normalizedHref = normalizePath(href)
  return (
    normalizedCurrentPath === normalizedHref ||
    normalizedCurrentPath.startsWith(normalizedHref + '/')
  )
}

const isGroup = (entry: SidebarLink | SidebarGroup): entry is SidebarGroup =>
  'items' in entry
---

<div class="left-sidebar" data-current-path={currentPath}>
  <div class="sidebar-content">
    <nav class="section-nav">
      {
        items ? (
          items.map((entry) =>
            isGroup(entry) ? (
              <div class="group" data-href={entry.href ?? '#'}>
                <div class="group-header">
                  <a
                    href={entry.href ?? '#'}
                    class={isGroupActive(entry.href) ? 'active' : undefined}
                  >
                    {entry.label}
                  </a>
                  <button
                    class="group-toggle"
                    aria-label="切换分组"
                    aria-expanded={isGroupActive(entry.href)}
                  >
                    <svg
                      width="12"
                      height="12"
                      viewBox="0 0 12 12"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      aria-hidden="true"
                    >
                      <path d="M3 5l3 3 3-3" />
                    </svg>
                  </button>
                </div>
                <div class="submenu">
                  {entry.items?.map((link) => (
                    <a
                      href={link.href}
                      class={isExactActive(link.href) ? 'active' : undefined}
                    >
                      {link.label}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a
                href={entry.href}
                class={isExactActive(entry.href) ? 'active' : undefined}
              >
                {entry.label}
              </a>
            ),
          )
        ) : (
          <slot />
        )
      }
    </nav>
  </div>
</div>

<script>
  const root =
    document.currentScript?.closest('.left-sidebar') ||
    document.querySelector('.left-sidebar')
  ;(() => {
    if (!root) return
    const currentPath = root.getAttribute('data-current-path') || '/'
    const groups = root.querySelectorAll('.group')
    groups.forEach((g) => {
      const href = g.getAttribute('data-href') || ''
      const toggle = g.querySelector('.group-toggle')
      const submenu = g.querySelector('.submenu')
      if (!toggle || !submenu) return
      // 读取记忆
      const key = `sidebar:group:${href}`
      const remembered = localStorage.getItem(key)
      const shouldOpenByPath =
        currentPath === href || currentPath.startsWith(href + '/')
      let collapsed =
        remembered === '0'
          ? false
          : remembered === '1'
            ? true
            : !shouldOpenByPath
      function apply() {
        g.classList.toggle('collapsed', collapsed)
        toggle?.setAttribute('aria-expanded', String(!collapsed))
      }
      apply()
      toggle.addEventListener('click', (e) => {
        e.preventDefault()
        collapsed = !collapsed
        localStorage.setItem(key, collapsed ? '1' : '0')
        apply()
      })
    })
  })()
</script>

<style>
  .left-sidebar {
    position: sticky;
    top: 60px;
    width: var(--sidebar-width);
    height: calc(100vh - 60px);
    background-color: transparent;
    border-radius: 0;
    overflow-y: auto;
    /* 统一侧边栏字号与行高，避免被页面内容影响 */
    font-size: 14px;
    line-height: 1.45;
    border: none;
  }

  .sidebar-content {
    padding: 1.5rem;
  }

  /* 移除顶部标题展示，避免视觉不协调 */
  .section-title {
    display: none;
  }

  .section-nav {
    display: flex;
    flex-direction: column;
    gap: 0.35rem; /* 统一顶层条目间距，更紧凑 */
  }

  .section-nav > * {
    flex-shrink: 0;
  }

  .section-nav a {
    color: var(--text-muted);
    text-decoration: none;
    padding: 0.5rem 0.875rem;
    border-radius: var(--border-radius-sm);
    transition: all 0.2s ease;
    /* 随容器字号等比缩放，保持层级统一 */
    font-size: 0.95em;
    display: block;
  }

  .section-nav a:hover,
  .section-nav a:focus,
  .section-nav a:active {
    color: var(--link-hover-color);
    background-color: var(--surface-tint-03);
    outline: none;
    box-shadow: none;
  }

  .section-nav a.active {
    /* 高亮当前页面 */
    color: var(--color-text-white);
    background-color: var(--surface-tint-06);
    border-left: none;
  }

  /* 层级菜单样式 */
  /* 顶层分组不额外叠加间距，统一交给 .section-nav 的 gap 控制 */
  .group {
    margin: 0;
  }

  .group-header {
    position: relative;
  }

  .group-header .group-toggle {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%) rotate(0deg);
    width: 24px;
    height: 24px;
    display: grid;
    place-items: center;
    color: var(--color-text-secondary);
    background: transparent;
    border: none;
    padding: 0;
    opacity: 0;
    transition:
      opacity 0.2s ease,
      transform 0.2s ease,
      color 0.2s ease;
    cursor: pointer;
  }

  /* 悬停分组时显示 */
  .group-header:hover .group-toggle,
  .group-header:focus-within .group-toggle {
    opacity: 1;
  }

  /* 展开时旋转180° */
  .group.collapsed .group-header .group-toggle {
    transform: translateY(-50%) rotate(-180deg);
  }

  /* 键盘聚焦时也显示（可访问性） */
  .group-toggle:focus-visible {
    opacity: 1;
  }

  /* 悬停按钮自身时提亮 */
  .group-header .group-toggle:hover {
    color: var(--color-text-white);
  }

  /* 减少动画 */
  @media (prefers-reduced-motion: reduce) {
    .group-toggle {
      transition: none;
    }
  }

  .group.collapsed .submenu {
    display: none;
  }

  /* 注意：slot 注入的内容默认不受 scoped 样式影响。
   为了让传入内容中的 .submenu 生效，这里使用 :global 进行样式声明。 */
  :global(.submenu) {
    display: flex;
    flex-direction: column;
    width: 100%;
    gap: 0.2rem; /* 统一子项间距，略微收紧 */
    margin: 0.2rem 0 0; /* 与上方分组标题间距更紧凑 */
  }

  :global(.submenu) a {
    display: block;
    padding: 0.4rem 0.75rem 0.4rem 2rem;
    font-size: 0.875em;
    border-left: 2px solid transparent;
    color: var(--text-muted);
    text-decoration: none;
    border-radius: var(--border-radius-sm);
    transition: all 0.2s ease;
    margin: 0; /* 间距由父级 gap 控制，避免页面之间不一致 */
  }

  :global(.submenu) a:hover,
  :global(.submenu) a:focus,
  :global(.submenu) a:active {
    color: var(--link-hover-color);
    background-color: var(--surface-tint-03);
    border-left-color: transparent;
    outline: none;
    box-shadow: none;
  }

  :global(.submenu) a.active {
    /* 子项选中高亮 */
    color: var(--color-text-white);
    border-left-color: transparent;
    background-color: var(--surface-tint-06);
  }

  @media (max-width: 1024px) {
    .left-sidebar {
      display: none;
    }
  }
</style>
