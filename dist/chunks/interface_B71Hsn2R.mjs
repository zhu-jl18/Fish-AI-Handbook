import { c as createComponent, m as maybeRenderHead, u as unescapeHTML, a as renderTemplate } from './astro/server_DMTDEdEd.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<h1 id=\"为什么要懂接口\">为什么要懂“接口”</h1>\n<ul>\n<li>决定后续能否统一配置 Base URL/Key、无痛切换供应商。</li>\n<li>影响流式/工具调用/多模态等能力的使用方式。</li>\n</ul>\n<h2 id=\"openaichat-completions--responses\">OpenAI（Chat Completions / Responses）</h2>\n<ul>\n<li>Base URL：<code>https://api.openai.com/v1</code></li>\n<li>常见路径：<code>/chat/completions</code>、（新）<code>/responses</code></li>\n<li>流式：SSE（<code>stream: true</code>），事件逐片返回。</li>\n<li>工具调用：<code>tools</code>/<code>function_call</code>，生态丰富。</li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#6A737D\"># cURL（Chat Completions）</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#9ECBFF\"> https://api.openai.com/v1/chat/completions</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  -H</span><span style=\"color:#9ECBFF\"> \"Authorization: Bearer </span><span style=\"color:#E1E4E8\">$OPENAI_API_KEY</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  -H</span><span style=\"color:#9ECBFF\"> \"Content-Type: application/json\"</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  -d</span><span style=\"color:#9ECBFF\"> '{</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"model\": \"gpt-4o-mini\",</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"messages\": [</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">      {\"role\":\"user\",\"content\":\"给出三条写作建议\"}</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    ],</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"stream\": true</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  }'</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"anthropicclaude\">Anthropic（Claude）</h2>\n<ul>\n<li>Base URL：<code>https://api.anthropic.com/v1</code></li>\n<li>路径：<code>/messages</code></li>\n<li>流式：事件块推送（<code>anthropic-version</code> 头必填）。</li>\n<li>工具调用：<code>tools</code> + <code>tool_use</code>/<code>tool_result</code>，消息结构与 OpenAI 不同。</li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#9ECBFF\"> https://api.anthropic.com/v1/messages</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  -H</span><span style=\"color:#9ECBFF\"> \"x-api-key: </span><span style=\"color:#E1E4E8\">$ANTHROPIC_API_KEY</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  -H</span><span style=\"color:#9ECBFF\"> \"anthropic-version: 2023-06-01\"</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  -H</span><span style=\"color:#9ECBFF\"> \"content-type: application/json\"</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  -d</span><span style=\"color:#9ECBFF\"> '{</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"model\": \"claude-3-5-sonnet-20240620\",</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"messages\": [{\"role\":\"user\",\"content\":\"总结要点\"}],</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"stream\": true</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  }'</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"google-gemini\">Google Gemini</h2>\n<ul>\n<li>Base URL：<code>https://generativelanguage.googleapis.com/v1beta</code></li>\n<li>路径：<code>/models/{model}:generateContent</code>（JSON）；流式为 <code>streamGenerateContent</code>。</li>\n<li>工具/函数：<code>toolConfig</code> 与 <code>functionDeclarations</code>/<code>functionCalls</code>。</li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">curl</span><span style=\"color:#9ECBFF\"> \"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=</span><span style=\"color:#E1E4E8\">$GEMINI_API_KEY</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  -H</span><span style=\"color:#9ECBFF\"> \"Content-Type: application/json\"</span><span style=\"color:#79B8FF\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  -d</span><span style=\"color:#9ECBFF\"> '{</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">    \"contents\": [{\"parts\":[{\"text\":\"解释 RAG 用在什么场景\"}]}]</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  }'</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"其他兼容接口openai-compatible\">其他兼容接口（OpenAI-Compatible）</h2>\n<ul>\n<li>常见 Base URL（仅示例，具体以官方为准）：\n<ul>\n<li>Together：<code>https://api.together.xyz/v1</code></li>\n<li>OpenRouter：<code>https://openrouter.ai/api/v1</code></li>\n<li>Groq：<code>https://api.groq.com/openai/v1</code></li>\n<li>DeepSeek：<code>https://api.deepseek.com/v1</code></li>\n<li>Azure OpenAI：形如 <code>https://{resource}.openai.azure.com/openai/deployments/{deployment}</code>（路径与签名不同）</li>\n</ul>\n</li>\n<li>价值：用一份 OpenAI 兼容客户端，在多家之间快速切换；记得核对模型名与工具调用是否完全兼容。</li>\n</ul>\n<h2 id=\"base-url-与环境变量示例\">Base URL 与环境变量示例</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\"><code><span class=\"line\"><span style=\"color:#6A737D\">// 统一读取配置并创建简单客户端</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> baseUrl</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> process.env.</span><span style=\"color:#79B8FF\">MODEL_BASE_URL</span><span style=\"color:#F97583\"> ||</span><span style=\"color:#9ECBFF\"> \"https://api.openai.com/v1\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> apiKey</span><span style=\"color:#F97583\">  =</span><span style=\"color:#E1E4E8\"> process.env.</span><span style=\"color:#79B8FF\">MODEL_API_KEY</span><span style=\"color:#F97583\">  ||</span><span style=\"color:#9ECBFF\"> \"\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">async</span><span style=\"color:#F97583\"> function</span><span style=\"color:#B392F0\"> ask</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">prompt</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> res</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#B392F0\"> fetch</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">`${</span><span style=\"color:#E1E4E8\">baseUrl</span><span style=\"color:#9ECBFF\">}/chat/completions`</span><span style=\"color:#E1E4E8\">, {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    method: </span><span style=\"color:#9ECBFF\">\"POST\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    headers: {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      Authorization: </span><span style=\"color:#9ECBFF\">`Bearer ${</span><span style=\"color:#E1E4E8\">apiKey</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">      \"Content-Type\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"application/json\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    body: </span><span style=\"color:#79B8FF\">JSON</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">stringify</span><span style=\"color:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      model: process.env.</span><span style=\"color:#79B8FF\">MODEL_NAME</span><span style=\"color:#F97583\"> ||</span><span style=\"color:#9ECBFF\"> \"gpt-4o-mini\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      messages: [{ role: </span><span style=\"color:#9ECBFF\">\"user\"</span><span style=\"color:#E1E4E8\">, content: prompt }],</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      stream: </span><span style=\"color:#79B8FF\">false</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  });</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> res.</span><span style=\"color:#B392F0\">json</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>.env.example</code> 建议：</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">MODEL_BASE_URL</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">https://api.openai.com/v1</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">MODEL_API_KEY</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">sk-xxxxx</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">MODEL_NAME</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">gpt-4o-mini</span></span>\n<span class=\"line\"></span></code></pre>\n<h2 id=\"小结如何选择切换\">小结：如何选择/切换</h2>\n<ul>\n<li>统一接口层：把 Base URL/Key/ModelName 都抽到配置。</li>\n<li>不同家的“流式/工具/多模态”细节不同，适配在接口层做一次即可。</li>\n<li>需要合规与稳定时，可选代理/网关统一出入口（见“其他常见术语 > 代理/反代”）。</li>\n</ul>";

				const frontmatter = {"title":"接口","description":"OpenAI / Gemini / Anthropic 与兼容接口的差异与 Base URL 配置"};
				const file = "X:/Projcet/AI BOOK/src/content/docs/01-fish-talks/glossary/interface.md";
				const url = undefined;
				function rawContent() {
					return "\r\n# 为什么要懂“接口”\r\n\r\n- 决定后续能否统一配置 Base URL/Key、无痛切换供应商。\r\n- 影响流式/工具调用/多模态等能力的使用方式。\r\n\r\n## OpenAI（Chat Completions / Responses）\r\n\r\n- Base URL：`https://api.openai.com/v1`\r\n- 常见路径：`/chat/completions`、（新）`/responses`\r\n- 流式：SSE（`stream: true`），事件逐片返回。\r\n- 工具调用：`tools`/`function_call`，生态丰富。\r\n\r\n```bash\r\n# cURL（Chat Completions）\r\ncurl https://api.openai.com/v1/chat/completions \\\r\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\r\n    \"model\": \"gpt-4o-mini\",\r\n    \"messages\": [\r\n      {\"role\":\"user\",\"content\":\"给出三条写作建议\"}\r\n    ],\r\n    \"stream\": true\r\n  }'\r\n```\r\n\r\n## Anthropic（Claude）\r\n\r\n- Base URL：`https://api.anthropic.com/v1`\r\n- 路径：`/messages`\r\n- 流式：事件块推送（`anthropic-version` 头必填）。\r\n- 工具调用：`tools` + `tool_use`/`tool_result`，消息结构与 OpenAI 不同。\r\n\r\n```bash\r\ncurl https://api.anthropic.com/v1/messages \\\r\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\r\n  -H \"anthropic-version: 2023-06-01\" \\\r\n  -H \"content-type: application/json\" \\\r\n  -d '{\r\n    \"model\": \"claude-3-5-sonnet-20240620\",\r\n    \"messages\": [{\"role\":\"user\",\"content\":\"总结要点\"}],\r\n    \"stream\": true\r\n  }'\r\n```\r\n\r\n## Google Gemini\r\n\r\n- Base URL：`https://generativelanguage.googleapis.com/v1beta`\r\n- 路径：`/models/{model}:generateContent`（JSON）；流式为 `streamGenerateContent`。\r\n- 工具/函数：`toolConfig` 与 `functionDeclarations`/`functionCalls`。\r\n\r\n```bash\r\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=$GEMINI_API_KEY\" \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\r\n    \"contents\": [{\"parts\":[{\"text\":\"解释 RAG 用在什么场景\"}]}]\r\n  }'\r\n```\r\n\r\n## 其他兼容接口（OpenAI-Compatible）\r\n\r\n- 常见 Base URL（仅示例，具体以官方为准）：\r\n  - Together：`https://api.together.xyz/v1`\r\n  - OpenRouter：`https://openrouter.ai/api/v1`\r\n  - Groq：`https://api.groq.com/openai/v1`\r\n  - DeepSeek：`https://api.deepseek.com/v1`\r\n  - Azure OpenAI：形如 `https://{resource}.openai.azure.com/openai/deployments/{deployment}`（路径与签名不同）\r\n- 价值：用一份 OpenAI 兼容客户端，在多家之间快速切换；记得核对模型名与工具调用是否完全兼容。\r\n\r\n## Base URL 与环境变量示例\r\n\r\n```ts\r\n// 统一读取配置并创建简单客户端\r\nconst baseUrl = process.env.MODEL_BASE_URL || \"https://api.openai.com/v1\";\r\nconst apiKey  = process.env.MODEL_API_KEY  || \"\";\r\n\r\nasync function ask(prompt: string) {\r\n  const res = await fetch(`${baseUrl}/chat/completions`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Authorization: `Bearer ${apiKey}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      model: process.env.MODEL_NAME || \"gpt-4o-mini\",\r\n      messages: [{ role: \"user\", content: prompt }],\r\n      stream: false,\r\n    }),\r\n  });\r\n  return res.json();\r\n}\r\n```\r\n\r\n`.env.example` 建议：\r\n\r\n```bash\r\nMODEL_BASE_URL=https://api.openai.com/v1\r\nMODEL_API_KEY=sk-xxxxx\r\nMODEL_NAME=gpt-4o-mini\r\n```\r\n\r\n## 小结：如何选择/切换\r\n\r\n- 统一接口层：把 Base URL/Key/ModelName 都抽到配置。\r\n- 不同家的“流式/工具/多模态”细节不同，适配在接口层做一次即可。\r\n- 需要合规与稳定时，可选代理/网关统一出入口（见“其他常见术语 > 代理/反代”）。\r\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"为什么要懂接口","text":"为什么要懂“接口”"},{"depth":2,"slug":"openaichat-completions--responses","text":"OpenAI（Chat Completions / Responses）"},{"depth":2,"slug":"anthropicclaude","text":"Anthropic（Claude）"},{"depth":2,"slug":"google-gemini","text":"Google Gemini"},{"depth":2,"slug":"其他兼容接口openai-compatible","text":"其他兼容接口（OpenAI-Compatible）"},{"depth":2,"slug":"base-url-与环境变量示例","text":"Base URL 与环境变量示例"},{"depth":2,"slug":"小结如何选择切换","text":"小结：如何选择/切换"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
