import { c as createComponent, m as maybeRenderHead, u as unescapeHTML, a as renderTemplate } from './astro/server_DMTDEdEd.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<h1 id=\"为什么要懂-api\">为什么要懂 API</h1>\n<ul>\n<li><strong>把模型接入真实应用</strong>：不掌握 API，就只能在网页聊天；会用 API 才能做自动化、批处理、私有化与生产化。</li>\n<li><strong>控制成本与体验</strong>：API 级别能精细控制参数、超时、重试、流式、并发与缓存，直接影响费用和用户体验。</li>\n<li><strong>拼装能力</strong>：API 让你把模型与数据库、向量检索、队列、存储、监控拼在一起，做真正的 AI 系统。</li>\n</ul>\n<h2 id=\"常见形态\">常见形态</h2>\n<ul>\n<li>REST/JSON（最主流）：<code>POST /v1/chat/completions</code>，简单、通用。</li>\n<li>SSE 流式：在响应头 <code>text/event-stream</code> 下逐片推送，适合长文本与实时性。</li>\n<li>WebSocket：需要双向通信时使用，如协同编辑、语音/多模态流。</li>\n</ul>\n<h2 id=\"关键参数以对话接口为例\">关键参数（以对话接口为例）</h2>\n<ul>\n<li><code>model</code>：选择具体模型与上下文长度。</li>\n<li><code>messages</code>：系统/用户/助手 角色组成的对话历史。</li>\n<li><code>temperature</code>、<code>top_p</code>：控制随机性与多样性。</li>\n<li><code>stream</code>：是否启用流式返回。</li>\n<li><code>tools</code>/<code>function_call</code>：工具调用（函数/检索/执行器）。</li>\n</ul>\n<h2 id=\"健壮性与成本\">健壮性与成本</h2>\n<ul>\n<li><strong>超时与重试</strong>：为长文本设置更大的超时；对可重入请求做指数退避重试。</li>\n<li><strong>幂等与缓存</strong>：请求指纹+结果缓存可降本提速（注意脱敏）。</li>\n<li><strong>日志与审计</strong>：记录提示、响应、耗时、token 用量，便于回放与优化。</li>\n</ul>\n<h2 id=\"最小示例伪代码\">最小示例（伪代码）</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> res</span><span style=\"color:#F97583\"> =</span><span style=\"color:#F97583\"> await</span><span style=\"color:#B392F0\"> fetch</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/v1/chat/completions\"</span><span style=\"color:#E1E4E8\">, {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  method: </span><span style=\"color:#9ECBFF\">\"POST\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  headers: { </span><span style=\"color:#9ECBFF\">\"Authorization\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">`Bearer ${</span><span style=\"color:#79B8FF\">API_KEY</span><span style=\"color:#9ECBFF\">}`</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"Content-Type\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"application/json\"</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  body: </span><span style=\"color:#79B8FF\">JSON</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">stringify</span><span style=\"color:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    model: </span><span style=\"color:#9ECBFF\">\"gpt-4o-mini\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    messages: [</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      { role: </span><span style=\"color:#9ECBFF\">\"system\"</span><span style=\"color:#E1E4E8\">, content: </span><span style=\"color:#9ECBFF\">\"你是助理\"</span><span style=\"color:#E1E4E8\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      { role: </span><span style=\"color:#9ECBFF\">\"user\"</span><span style=\"color:#E1E4E8\">, content: </span><span style=\"color:#9ECBFF\">\"帮我总结这段文本\"</span><span style=\"color:#E1E4E8\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    ],</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    temperature: </span><span style=\"color:#79B8FF\">0.2</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    stream: </span><span style=\"color:#79B8FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  })</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<blockquote>\n<p>结论：会 API，你才能把“会用模型”升级为“会做 AI 应用”。</p>\n</blockquote>";

				const frontmatter = {"title":"API","description":"API 是服务之间的调用契约，是把大模型接入到产品中的第一步"};
				const file = "X:/Projcet/AI BOOK/src/content/docs/01-fish-talks/glossary/api.md";
				const url = undefined;
				function rawContent() {
					return "\r\n# 为什么要懂 API\r\n\r\n- **把模型接入真实应用**：不掌握 API，就只能在网页聊天；会用 API 才能做自动化、批处理、私有化与生产化。\r\n- **控制成本与体验**：API 级别能精细控制参数、超时、重试、流式、并发与缓存，直接影响费用和用户体验。\r\n- **拼装能力**：API 让你把模型与数据库、向量检索、队列、存储、监控拼在一起，做真正的 AI 系统。\r\n\r\n## 常见形态\r\n\r\n- REST/JSON（最主流）：`POST /v1/chat/completions`，简单、通用。\r\n- SSE 流式：在响应头 `text/event-stream` 下逐片推送，适合长文本与实时性。\r\n- WebSocket：需要双向通信时使用，如协同编辑、语音/多模态流。\r\n\r\n## 关键参数（以对话接口为例）\r\n\r\n- `model`：选择具体模型与上下文长度。\r\n- `messages`：系统/用户/助手 角色组成的对话历史。\r\n- `temperature`、`top_p`：控制随机性与多样性。\r\n- `stream`：是否启用流式返回。\r\n- `tools`/`function_call`：工具调用（函数/检索/执行器）。\r\n\r\n## 健壮性与成本\r\n\r\n- **超时与重试**：为长文本设置更大的超时；对可重入请求做指数退避重试。\r\n- **幂等与缓存**：请求指纹+结果缓存可降本提速（注意脱敏）。\r\n- **日志与审计**：记录提示、响应、耗时、token 用量，便于回放与优化。\r\n\r\n## 最小示例（伪代码）\r\n\r\n```ts\r\nconst res = await fetch(\"/v1/chat/completions\", {\r\n  method: \"POST\",\r\n  headers: { \"Authorization\": `Bearer ${API_KEY}`, \"Content-Type\": \"application/json\" },\r\n  body: JSON.stringify({\r\n    model: \"gpt-4o-mini\",\r\n    messages: [\r\n      { role: \"system\", content: \"你是助理\" },\r\n      { role: \"user\", content: \"帮我总结这段文本\" }\r\n    ],\r\n    temperature: 0.2,\r\n    stream: true\r\n  })\r\n});\r\n```\r\n\r\n> 结论：会 API，你才能把“会用模型”升级为“会做 AI 应用”。\r\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"为什么要懂-api","text":"为什么要懂 API"},{"depth":2,"slug":"常见形态","text":"常见形态"},{"depth":2,"slug":"关键参数以对话接口为例","text":"关键参数（以对话接口为例）"},{"depth":2,"slug":"健壮性与成本","text":"健壮性与成本"},{"depth":2,"slug":"最小示例伪代码","text":"最小示例（伪代码）"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
